"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DaemonApi_1 = require("./DaemonApi");
var chai_1 = require("chai");
require("mocha");
describe('Daemon API', function () {
    var testCollectionName = 'TEST_COLLECTION';
    var testDocumentName = 'TEST_DOCUMENT';
    var testDocument = {
        stringKey: 'testValue',
        numericKey: 100,
        booleanKey: true,
        arrayKey: ['one', 'two', 'three'],
    };
    var daemonApi = new DaemonApi_1.DaemonApi({
        projectId: 'JIRO_SDK_TEST',
        projectToken: '',
    });
    it('should throw if a document does not exist', function () {
        daemonApi
            .get(testCollectionName, testDocumentName);
    });
    it('should create a document', function () {
        return daemonApi.set(testCollectionName, testDocumentName, testDocument)
            .then(function (success) {
            chai_1.expect(success).to.be.true;
        });
    });
    it('should read a document', function () {
        return daemonApi
            .get(testCollectionName, testDocumentName)
            .then(function (document) {
            chai_1.expect(document).to.deep.equal(testDocument);
        });
    });
    it('should search', function () {
        return daemonApi
            .search(testCollectionName, 'stringKey', 'test')
            .then(function (results) {
            chai_1.expect(results[0]).to.deep.equal(testDocument);
        });
    });
    it('should read multiple documents', function () {
        return daemonApi
            .getAll(testCollectionName, [testDocumentName])
            .then(function (documents) {
            chai_1.expect(documents[0]).to.deep.equal(testDocument);
        });
    });
    it('should read multiple documents with predicate', function () {
        return daemonApi
            .getAllWhere(testCollectionName, 'stringKey', '=', ['testValue'])
            .then(function (documents) {
            chai_1.expect(documents[0]).to.deep.equal(testDocument);
        });
    });
    it('should read a document with a predicate', function () {
        return daemonApi
            .getWhere(testCollectionName, 'stringKey', '==', 'testValue')
            .then(function (document) {
            chai_1.expect(document[0]).to.deep.equal(testDocument);
        });
    });
    it('should update a document', function () {
        return daemonApi.update(testCollectionName, testDocumentName, {
            stringKey: 'newValue',
        })
            .then(function () { return daemonApi.get(testCollectionName, testDocumentName); })
            .then(function (document) {
            chai_1.expect(document.stringKey).to.eq('newValue');
        });
    });
    it('should append a field to an array', function () {
        return daemonApi.arrayPush(testCollectionName, testDocumentName, {
            arrayKey: 'four',
        })
            .then(function () { return daemonApi.get(testCollectionName, testDocumentName); })
            .then(function (document) {
            chai_1.expect(document.arrayKey.length).to.eq(4);
        });
    });
    it('should remove a field from an array', function () {
        return daemonApi.arrayRemove(testCollectionName, testDocumentName, {
            arrayKey: 'four',
        })
            .then(function () { return daemonApi.get(testCollectionName, testDocumentName); })
            .then(function (document) {
            chai_1.expect(document.arrayKey.length).to.eq(3);
        });
    });
    it('should delete a document', function () {
        return daemonApi.delete(testCollectionName, testDocumentName)
            .then(function (success) {
            chai_1.expect(success).to.be.true;
        });
    });
});
//# sourceMappingURL=DaemonApi.spec.js.map