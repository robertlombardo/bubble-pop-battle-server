"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BaseServerApi_1 = require("./BaseServerApi");
var JiroStoreAdapter_1 = require("./store/JiroStoreAdapter");
var DaemonApi_1 = require("./daemon/DaemonApi");
var Jiro = /** @class */ (function (_super) {
    __extends(Jiro, _super);
    function Jiro(customConfig) {
        var _this = this;
        if (customConfig) {
            _this = _super.call(this, customConfig) || this;
        }
        else {
            if (!process.env.JIRO_PROJECT_ID || !process.env.JIRO_PROJECT_TOKEN) {
                throw new Error("\n          Couldn't find a JIRO_PROJECT_ID or JIRO_PROJECT_TOKEN in your environment.\n          If you are accessing the SDK from outside of a Jiro project, you need to either\n          supply a custom configuration object, or export the JIRO_PROJECT_ID and\n          JIRO_PROJECT_TOKEN in your script.\n        ");
            }
            _this = _super.call(this, {
                projectId: process.env.JIRO_PROJECT_ID,
                projectToken: process.env.JIRO_PROJECT_TOKEN,
            }) || this;
        }
        _this.daemonApi = new DaemonApi_1.DaemonApi(_this.config);
        _this.Store = new JiroStoreAdapter_1.JiroStoreAdapter(_this.config, _this.daemonApi);
        return _this;
    }
    return Jiro;
}(BaseServerApi_1.BaseServerApi));
exports.default = Jiro;
//# sourceMappingURL=index.js.map